import asyncio
import os
from fastapi import FastAPI, Request
from loguru import logger

from webhook import router as webhook_router
from balance import router as balance_router
from auth import get_access_token
from telegram_logger import send_telegram_log
from trading import handle_signal  # ‚¨ÖÔ∏è –î–æ–±–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç

app = FastAPI()

# ‚úÖ Root-—ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.api_route("/", methods=["GET", "HEAD"])
async def root():
    return {"status": "ok", "message": "üöÄ Alor bot is running"}

# ‚úÖ Health Check
@app.api_route("/healthz", methods=["GET", "HEAD"])
async def health_check():
    return {"status": "healthy"}

# ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(webhook_router)
app.include_router(balance_router)

# ‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ Bot started")

    try:
        await send_telegram_log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

    try:
        asyncio.create_task(token_refresher())
        logger.info("üîÅ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ token_refresher: {e}")
        try:
            await send_telegram_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ token_refresher:\n{e}")
        except:
            pass

    try:
        scheduler.start()
        logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        try:
            await send_telegram_log("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        except:
            pass
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        try:
            await send_telegram_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:\n{e}")
        except:
            pass

    try:
        asyncio.create_task(keep_alive())
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω keep_alive –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è event loop")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ keep_alive: {e}")

# ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
@app.on_event("shutdown")
async def on_shutdown():
    logger.warning("üõë –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
    try:
        await send_telegram_log("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Render")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-–ª–æ–≥–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

# ‚úÖ –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async def token_refresher():
    while True:
        try:
            get_access_token()
            logger.debug("üîÅ Token refreshed")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            try:
                await send_telegram_log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:\n{e}")
            except:
                pass
        await asyncio.sleep(1500)

# ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ event loop
async def keep_alive():
    while True:
        await asyncio.sleep(55)

# ‚úÖ Webhook –æ—Ç TradingView
@app.post("/webhook/sEcr0901A2B3")
async def tradingview_webhook(request: Request):
    payload = await request.json()
    signal_ticker = payload.get("ticker")
    action = payload.get("action")
    token = payload.get("token")

    expected_token = os.getenv("WEBHOOK_TOKEN")

    if token != expected_token:
        logger.warning("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ–±—Ö—É–∫–∞")
        return {"status": "unauthorized"}

    if not signal_ticker or not action:
        return {"status": "invalid payload"}

    await handle_signal(signal_ticker, action)
    return {"status": "ok"}
