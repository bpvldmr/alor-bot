# server.py
import asyncio
from fastapi import FastAPI
from loguru import logger
from webhook import router as webhook_router
from balance import router as balance_router
from auth import get_access_token  # ‚úÖ sync-—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ auth.py

from scheduler import scheduler  # ‚úÖ –ø–æ–¥–∫–ª—é—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç

app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(webhook_router)
app.include_router(balance_router)

@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ Bot started")
    asyncio.create_task(token_refresher())
    scheduler.start()  # ‚úÖ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫
    logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

# ‚ôªÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
async def token_refresher():
    while True:
        try:
            get_access_token()  # ‚úÖ sync
            logger.debug("üîÅ Token refreshed")
        except Exception as e:
            logger.error(f"‚ùå Refresh error: {e}")
        await asyncio.sleep(1500)  # 25 –º–∏–Ω—É—Ç
