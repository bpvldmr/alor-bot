
import asyncio
from fastapi import FastAPI
from loguru import logger
from webhook import webhook_router
from balance import balance_router
from auth import get_access_token

app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–∞—à–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã
app.include_router(webhook_router)
app.include_router(balance_router)


async def refresh_token_loop():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —Ä–∞–∑ –≤ 3300 —Å–µ–∫—É–Ω–¥ (~55 –º–∏–Ω—É—Ç) —Ç–∞—â–∏–º –Ω–æ–≤—ã–π access_token.
    """
    while True:
        try:
            logger.info("üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token‚Ä¶")
            # get_access_token ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –ø–æ—ç—Ç–æ–º—É –∑–∞–ø—É—Å–∫–∞–µ–º –≤ thread-pool
            await asyncio.to_thread(get_access_token)
            logger.info("‚úÖ access_token –æ–±–Ω–æ–≤–ª—ë–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_token: {e}")
        await asyncio.sleep(3300)


@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    # 1) –°—Ä–∞–∑—É –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    try:
        await asyncio.to_thread(get_access_token)
        logger.info("‚úÖ access_token –ø–æ–ª—É—á–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")

    # 2) –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    app.state._refresh_task = asyncio.create_task(refresh_token_loop())


@app.on_event("shutdown")
async def on_shutdown():
    logger.info("üîå –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏")
    task = getattr(app.state, "_refresh_task", None)
    if task:
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            logger.info("üîå –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
