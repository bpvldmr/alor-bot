import asyncio
from fastapi import FastAPI
from loguru import logger

# –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ä–æ—É—Ç–µ—Ä—ã
from webhook import webhook_router
from balance import balance_router  # –µ—Å–ª–∏ –≤ balance.py –≤–∞—à —Ä–æ—É—Ç–µ—Ä –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è balance_router

from auth import get_access_token

app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
app.include_router(webhook_router)
app.include_router(balance_router)

@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ Bot started")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ç–∞—Å–∫ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞
    asyncio.create_task(_token_refresher())

async def _token_refresher():
    while True:
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π get_access_token –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await asyncio.to_thread(get_access_token)
            logger.debug("üîÅ Token refreshed")
        except Exception as e:
            logger.error(f"‚ùå Refresh error: {e}")
        # –ñ–¥—ë–º –ø—Ä–∏–º–µ—Ä–Ω–æ 55 –º–∏–Ω—É—Ç
        await asyncio.sleep(3300)
