import requests
import uuid
from config import BASE_URL, ACCOUNT_ID
from auth import get_access_token
from telegram_logger import send_telegram_log  # ‚úÖ –¥–ª—è –ª–æ–≥–æ–≤

def place_order(order: dict):
    token = get_access_token()
    url = f"{BASE_URL}/commandapi/warptrans/TRADE/v2/client/orders/actions/market"

    headers = {
        "Authorization": f"Bearer {token}",
        "X-REQID": str(uuid.uuid4()),
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    payload = {
        "side": order["side"],  # "buy" –∏–ª–∏ "sell"
        "quantity": int(order["qty"]),  # ‚úÖ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ int
        "instrument": {
            "symbol": order["instrument"],
            "exchange": "MOEX",
            "instrumentGroup": "FUT"  # ‚úÖ –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
        },
        "comment": "ALGO BOT",
        "user": {
            "portfolio": ACCOUNT_ID
        },
        "timeInForce": "day",
        "allowMargin": False
    }

    try:
        resp = requests.post(url, json=payload, headers=headers, timeout=10)
        resp.raise_for_status()
        data = resp.json()

        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç ALOR –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            import asyncio
            asyncio.create_task(send_telegram_log(f"üì¶ –û—Ç–≤–µ—Ç ALOR:\n{data}"))
        except:
            pass  # –µ—Å–ª–∏ –≤–Ω–µ asyncio, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        return {
            "price": data.get("price", 0),
            "order_id": data.get("orderNumber", "N/A"),
            "status": "success"
        }

    except requests.exceptions.HTTPError as e:
        return {
            "status": "error",
            "code": e.response.status_code,
            "detail": e.response.text
        }

    except Exception as e:
        return {"status": "error", "detail": str(e)}
