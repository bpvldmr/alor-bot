import uuid
import httpx
from config import BASE_URL, ACCOUNT_ID
from auth import get_access_token
from telegram_logger import send_telegram_log  # ‚úÖ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

async def place_order(order: dict):
    token = get_access_token()
    url = f"{BASE_URL}/commandapi/warptrans/TRADE/v2/client/orders/actions/market"

    headers = {
        "Authorization": f"Bearer {token}",
        "X-REQID": str(uuid.uuid4()),
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    payload = {
        "side": order["side"].upper(),  # ‚úÖ "BUY" –∏–ª–∏ "SELL"
        "quantity": int(order["qty"]),  # ‚úÖ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        "instrument": {
            "symbol": order["instrument"],        # ‚úÖ "NGN5", "CRU5", –±–µ–∑ "MOEX:"
            "exchange": "MOEX",
            "instrumentGroup": "RFUD"              # ‚úÖ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
        },
        "comment": "ALGO BOT",                    # üí¨ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        "user": {
            "portfolio": ACCOUNT_ID               # ‚úÖ —Ç–≤–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á—ë—Ç
        },
        "type": "market",                         # ‚úÖ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: —Ç–∏–ø –∑–∞—è–≤–∫–∏
        "timeInForce": "oneday",                     # ‚úÖ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è
        "allowMargin": true                      # –º–∞—Ä–∂–∞
    }

    # üîç –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    await send_telegram_log(
        f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏:\n"
        f"üìà –¢–∏–∫–µ—Ä: `{order['instrument']}`\n"
        f"üìä –°—Ç–æ—Ä–æ–Ω–∞: `{order['side'].upper()}` | –û–±—ä—ë–º: `{order['qty']}`\n"
        f"üîó URL: `{url}`"
    )

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.post(url, json=payload, headers=headers)
            resp.raise_for_status()
            data = resp.json()

        await send_telegram_log(
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞—è–≤–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞\n"
            f"üßæ –û—Ç–≤–µ—Ç:\n```json\n{data}\n```"
        )

        return {
            "price": data.get("price", 0),
            "order_id": data.get("orderNumber", "N/A"),
            "status": "success"
        }

    except httpx.HTTPStatusError as e:
        await send_telegram_log(
            f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞—è–≤–∫–µ:\n"
            f"–ö–æ–¥: {e.response.status_code}\n"
            f"–û—Ç–≤–µ—Ç:\n```{e.response.text}```"
        )
        return {
            "status": "error",
            "code": e.response.status_code,
            "detail": e.response.text
        }

    except Exception as e:
        await send_telegram_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:\n{str(e)}")
        return {"status": "error", "detail": str(e)}
