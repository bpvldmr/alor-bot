import uuid
import httpx
from config import BASE_URL, ACCOUNT_ID
from auth import get_access_token
from telegram_logger import send_telegram_log
from loguru import logger

async def place_order(order: dict):
    token = await get_access_token()
    url = f"{BASE_URL}/commandapi/warptrans/TRADE/v2/client/orders/actions/market"

    headers = {
        "Authorization": f"Bearer {token}",
        "X-REQID": str(uuid.uuid4()),
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    payload = {
        "side": order["side"].upper(),
        "quantity": int(order["qty"]),
        "instrument": {
            "symbol": order["symbol"],  # ‚úÖ –¢–∏–∫–µ—Ä –≤–∏–¥–∞ CNY-9.25
            "exchange": "MOEX",
            "instrumentGroup": "RFUD"
        },
        "comment": "ALGO BOT",
        "user": {
            "portfolio": ACCOUNT_ID
        },
        "type": "market",
        "timeInForce": "oneday",
        "allowMargin": True
    }

    # ‚úÖ –õ–æ–≥: —Ç–∏–∫–µ—Ä —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç symbol, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å
    await send_telegram_log(
        f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏:\n"
        f"üìà –¢–∏–∫–µ—Ä: `{order['symbol']}`\n"
        f"üìä –°—Ç–æ—Ä–æ–Ω–∞: `{order['side'].upper()}` | –û–±—ä—ë–º: `{order['qty']}`\n"
        f"üîó URL: `{url}`"
    )

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.post(url, json=payload, headers=headers)
            resp.raise_for_status()
            data = resp.json()

        if "price" not in data:
            await send_telegram_log("‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç ALOR –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (`price`)")

        await send_telegram_log(
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞—è–≤–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞\n"
            f"üßæ –û—Ç–≤–µ—Ç:\n```json\n{data}\n```"
        )

        return {
            "price": float(data.get("price") or 0),
            "order_id": data.get("orderNumber", "N/A"),
            "filled": data.get("executedQuantity", int(order["qty"])),  # –µ—Å–ª–∏ –±—É–¥–µ—Ç
            "status": "success"
        }

    except httpx.HTTPStatusError as e:
        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ ALOR: {e.response.status_code} - {e.response.text}")
        await send_telegram_log(
            f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞—è–≤–∫–µ:\n"
            f"–ö–æ–¥: {e.response.status_code}\n"
            f"–û—Ç–≤–µ—Ç:\n```{e.response.text}```"
        )
        return {
            "status": "error",
            "code": e.response.status_code,
            "detail": e.response.text
        }

    except Exception as e:
        logger.error(f"‚ùå ALOR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await send_telegram_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:\n{str(e)}")
        return {"status": "error", "detail": str(e)}
