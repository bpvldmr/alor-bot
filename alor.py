import httpx
import time
from config import ACCOUNT_ID
from telegram_logger import send_telegram_log  # –ª–æ–≥ –≤ Telegram

BASE_URL = "https://api.alor.ru"

def place_order(order, token):
    url = f"{BASE_URL}/commandapi/warptrans/TRADE/v2/client/{ACCOUNT_ID}/orders"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

    side = order["side"]
    qty = order["qty"]
    instrument = order["instrument"]

    body = {
        "side": side,
        "quantity": qty,
        "instrument": {
            "symbol": instrument,
            "exchange": "FORTS"  # ‚úÖ –≤—Å–µ–≥–¥–∞ FORTS
        },
        "orderType": "Market",
        "timeInForce": "Day"
    }

    try:
        # üü° –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
        send_telegram_log(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ ALOR:\n{body}")

        response = httpx.post(url, json=body, headers=headers, timeout=10)
        data = response.json()

        if "orderNumber" not in data:
            send_telegram_log(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç orderNumber –≤ –æ—Ç–≤–µ—Ç–µ ALOR:\n{data}")
            return {"error": "–ù–µ—Ç orderNumber –≤ –æ—Ç–≤–µ—Ç–µ", "raw": data}

        order_id = data["orderNumber"]

        # üîÑ –ñ–¥—ë–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        for _ in range(10):
            status_url = f"{BASE_URL}/commandapi/warptrans/TRADE/v2/client/{ACCOUNT_ID}/orders/{order_id}"
            status_resp = httpx.get(status_url, headers=headers)
            status_data = status_resp.json()

            if status_data.get("status") == "filled":
                price = status_data.get("filledPrice") or status_data.get("price", 0)
                send_telegram_log(f"‚úÖ –ó–∞—è–≤–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞: {side.upper()} {qty} {instrument} @ {price}")
                return {
                    "price": price,
                    "status": "filled",
                    "order_id": order_id
                }

            elif status_data.get("status") in ["cancelled", "rejected"]:
                send_telegram_log(f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {status_data}")
                return {"error": f"–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {status_data.get('status')}", "details": status_data}

            time.sleep(0.5)

        send_telegram_log("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ 5 —Å–µ–∫—É–Ω–¥.")
        return {"error": "–ó–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è"}

    except Exception as e:
        send_telegram_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –≤ ALOR: {e}")
        return {"error": str(e)}
