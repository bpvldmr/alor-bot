from fastapi import APIRouter, HTTPException
from auth import get_access_token
import httpx
from loguru import logger

router = APIRouter()

BASE_URL = "https://api.alor.ru"
ACCOUNT_ID = "7502QAB"
TELEGRAM_TOKEN = "7610150119:AAGMzDYUdcI6QQuvt-Vsg8U4s1VSYarLIe0"
CHAT_ID = "205721225"

async def send_balance_to_telegram(summary: dict):
    message = f"""üìä *–°–≤–æ–¥–∫–∞ –ø–æ —Å—á—ë—Ç—É {ACCOUNT_ID}*

üí∞ *–°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:* {summary.get("buyingPower", 0):,.2f} ‚ÇΩ
üíº *–û—Ü–µ–Ω–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è:* {summary.get("portfolioEvaluation", 0):,.2f} ‚ÇΩ
üìâ *–ü—Ä–∏–±—ã–ª—å:* {summary.get("profit", 0):,.2f} ‚ÇΩ
üìâ *–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:* {summary.get("profitRate", 0):.2f}%
üïó *–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Ç—Ä–æ–º:* {summary.get("buyingPowerAtMorning", 0):,.2f} ‚ÇΩ
üí£ *–†–∏—Å–∫ –¥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è:* {summary.get("riskBeforeForcePositionClosing", 0):,.2f} ‚ÇΩ
üè¶ *–ú–∞—Ä–∂–∞:* {summary.get("initialMargin", 0)} / {summary.get("correctedMargin", 0)}
üíµ *–í RUB:* {summary.get("buyingPowerByCurrency", [{}])[0].get("buyingPower", 0):,.2f} ‚ÇΩ
"""

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=payload)
            response.raise_for_status()
            logger.info("üì§ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞–ª–∞–Ω—Å–∞ –≤ Telegram")

@router.get("/balance")
async def get_balance():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫ –≤—ã–≤–æ–¥—É –±–∞–ª–∞–Ω—Å –ø–æ —Å—á—ë—Ç—É ALOR (—á–µ—Ä–µ–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π endpoint /summary).
    –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –≤ Telegram.
    """
    token = get_access_token()
    url = f"{BASE_URL}/md/v2/Clients/{ACCOUNT_ID}/summary"
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }

    logger.debug(f"üì° URL: {url}")
    logger.debug(f"üîê Token: {token[:20]}...")

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(url, headers=headers)
            resp.raise_for_status()
            data = resp.json()
            logger.debug(f"üìä –û—Ç–≤–µ—Ç –æ—Ç Alor: {data}")
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e.response.status_code}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    await send_balance_to_telegram(data)
    balance = data.get("cashAvailableForWithdrawal", 0.0)
    return {"balance": balance}


@router.get("/debug_balance")
async def debug_balance():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç –æ—Ç Alor (—á–µ—Ä–µ–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π endpoint /summary).
    """
    token = get_access_token()
    url = f"{BASE_URL}/md/v2/Clients/MOEX{ACCOUNT_ID}/summary"
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }

    logger.debug(f"üêû Debug URL: {url}")
    logger.debug(f"üîê Token: {token[:20]}...")

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(url, headers=headers)
            resp.raise_for_status()
            data = resp.json()
            logger.debug(f"üêû Debug response: {data}")
            return data
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e.response.status_code}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
