from fastapi import APIRouter, HTTPException
from auth import get_access_token
from loguru import logger
import httpx

router = APIRouter()

BASE_URL = "https://api.alor.ru"
ACCOUNT_ID = "7502QAB"
TELEGRAM_TOKEN = "7610150119:AAGMzDYUdcI6QQuvt-Vsg8U4s1VSYarLIe0"
CHAT_ID = "205721225"


def build_portfolio_summary(summary: dict, profit_total: float, base_balance: float) -> str:
    buying_power = summary.get("buyingPower", 0)
    portfolio_value = summary.get("portfolioEvaluation", 0)
    profit_unrealized = summary.get("profit", 0)
    profit_rate = summary.get("profitRate", 0)
    morning_funds = summary.get("buyingPowerAtMorning", 0)
    force_close_risk = summary.get("riskBeforeForcePositionClosing", 0)
    margin1 = summary.get("initialMargin", 0)
    margin2 = summary.get("correctedMargin", 0)
    rub_funds = summary.get("buyingPowerByCurrency", [{}])[0].get("buyingPower", 0)

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    full_yield = (profit_total / base_balance) * 100 if base_balance else 0

    report = f"""üíº *–°–≤–æ–¥–∫–∞ –ø–æ —Å—á—ë—Ç—É {ACCOUNT_ID}*

üí∞ *–°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:* {buying_power:,.2f} ‚ÇΩ
üíº *–û—Ü–µ–Ω–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è:* {portfolio_value:,.2f} ‚ÇΩ
üìâ *–ù–µ—Ä–µ–∞–ª–∏–∑. –ø—Ä–∏–±—ã–ª—å:* {profit_unrealized:+.2f} ‚ÇΩ ({profit_rate:+.2f}%)
üìà *–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å –Ω–∞—á–∞–ª–∞:* {full_yield:+.2f}%
üìä *–°–∞–ª—å–¥–æ —Å–¥–µ–ª–æ–∫:* {profit_total:+.2f} ‚ÇΩ
üïó *–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Ç—Ä–æ–º:* {morning_funds:,.2f} ‚ÇΩ
üí£ *–†–∏—Å–∫ –¥–æ –º–∞—Ä–∂–∏–Ω-–∫–æ–ª–ª–∞:* {force_close_risk:,.2f} ‚ÇΩ
üè¶ *–ú–∞—Ä–∂–∞:* {margin1} / {margin2}
üíµ *–í RUB:* {rub_funds:,.2f} ‚ÇΩ
"""
    return report


async def send_balance_to_telegram(summary: dict, profit_total: float, base_balance: float):
    try:
        report = build_portfolio_summary(summary, profit_total, base_balance or 1)

        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHAT_ID,
            "text": report,
            "parse_mode": "Markdown"
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=payload)
            response.raise_for_status()
            logger.info("üì§ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞–ª–∞–Ω—Å–∞ –≤ Telegram")


@router.get("/balance")
async def get_balance():
    token = await get_access_token()
    url = f"{BASE_URL}/md/v2/Clients/MOEX/{ACCOUNT_ID}/summary"
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(url, headers=headers)
            resp.raise_for_status()
            data = resp.json()
    except httpx.HTTPStatusError as e:
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e.response.status_code}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    # ‚ùó –ë–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ profit_total / base_balance —Ç—É—Ç send_balance_to_telegram –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
    await send_balance_to_telegram(data, profit_total=0, base_balance=1)  # –ó–∞–≥–ª—É—à–∫–∞

    balance = data.get("cashAvailableForWithdrawal", 0.0)
    return {"balance": balance}


@router.get("/debug_balance")
async def debug_balance():
    token = await get_access_token()
    url = f"{BASE_URL}/md/v2/Clients/MOEX/{ACCOUNT_ID}/summary"
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(url, headers=headers)
            resp.raise_for_status()
            return resp.json()
    except httpx.HTTPStatusError as e:
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e.response.status_code}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
