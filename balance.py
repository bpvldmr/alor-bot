from fastapi import APIRouter, HTTPException
from auth import get_access_token
import httpx
import requests
from loguru import logger

router = APIRouter()

BASE_URL = "https://api.alor.ru"
ACCOUNT_ID = "7502QAB"
EXCHANGE = "MOEX"

@router.get("/balance")
async def get_balance():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫ –≤—ã–≤–æ–¥—É –±–∞–ª–∞–Ω—Å –ø–æ —Å—á—ë—Ç—É ALOR (—á–µ—Ä–µ–∑ legacy endpoint).
    """
    token = await get_access_token()  # ‚úÖ await –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    url = f"{BASE_URL}/md/v2/Clients/{EXCHANGE}/{ACCOUNT_ID}/summary"
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }

    logger.debug(f"üì° URL: {url}")
    logger.debug(f"üîê Token: {token[:20]}...")

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            resp = await client.get(url, headers=headers)
            resp.raise_for_status()
            data = resp.json()
            logger.debug(f"üìä –û—Ç–≤–µ—Ç –æ—Ç Alor: {data}")
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e.response.status_code}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    balance = data.get("cashAvailableForWithdraw", 0.0)
    return {"balance": balance}


@router.get("/debug_balance")
def debug_balance():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç –æ—Ç Alor (—á–µ—Ä–µ–∑ legacy endpoint).
    """
    token = get_access_token()
    url = f"{BASE_URL}/md/v2/Clients/legacy/{EXCHANGE}/{ACCOUNT_ID}/summary"
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }

    logger.debug(f"üêû Debug URL: {url}")
    logger.debug(f"üîê Token: {token[:20]}...")

    try:
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        logger.debug(f"üêû Debug response: {data}")
        return data
    except requests.HTTPError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e.response.status_code}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        raise HTTPException(status_code=502, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
