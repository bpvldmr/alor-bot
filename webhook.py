from fastapi import APIRouter, Request
import json
from telegram_logger import send_telegram_log
from trading import process_signal  # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
from auth import get_current_balance

router = APIRouter()

# üîê –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ TradingView webhook URL
SECRET_TOKEN = "sEcr0901A2B3"

@router.post("/webhook/{token}")
async def webhook(token: str, request: Request):
    token = token.strip()
    if token != SECRET_TOKEN:
        await send_telegram_log(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ URL: `{token}`")
        return {"status": "unauthorized"}

    try:
        raw_body = await request.body()
        if not raw_body:
            await send_telegram_log("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
            return {"status": "empty body"}

        raw = raw_body.decode("utf-8").strip()
        data = json.loads(raw)
    except json.JSONDecodeError as e:
        await send_telegram_log(f"‚ùå JSON decode error: {e}\nRaw: {raw}")
        return {"status": "invalid json"}
    except Exception as e:
        await send_telegram_log(f"‚ùå Unexpected error while parsing body: {e}")
        return {"status": "error", "message": str(e)}

    await send_telegram_log(f"üì© TV ‚Üí Bot:\n```json\n{raw}\n```")

    action = data.get("action", "").strip().upper()
    ticker = data.get("signal_ticker", "").strip()

    if not action or not ticker:
        await send_telegram_log("‚ö†Ô∏è Invalid payload: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'action' –∏–ª–∏ 'signal_ticker'")
        return {"status": "invalid payload"}

    try:
        result = await process_signal(ticker, action)
        await send_telegram_log(f"üîî –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return {"status": "ok", "result": result}

    except Exception as e:
        try:
            balance = await get_current_balance()
            await send_telegram_log(
                f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}\nüìä –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"
            )
        except Exception as be:
            await send_telegram_log(
                f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}\n‚ö†Ô∏è –ò –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {be}"
            )
        return {"status": "error", "message": str(e)}
