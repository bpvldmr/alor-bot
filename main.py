from fastapi import FastAPI, APIRouter, Request
from loguru import logger
from trading import handle_trading_signal  # ‚úÖ –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

app = FastAPI()
webhook_router = APIRouter()

# üîê –¢–æ–∫–µ–Ω –∑–∞—â–∏—Ç—ã –≤–µ–±—Ö—É–∫–∞
VALID_TOKEN = "sEcr0901A2B3"

@webhook_router.post("/webhook/{token}")
async def webhook(request: Request, token: str):
    if token != VALID_TOKEN:
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ URL: {token}")
        return {"error": f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ URL: {token}"}

    try:
        data = await request.json()
        signal_ticker = data.get("signal_ticker")
        action = data.get("action")

        if not signal_ticker or not action:
            return {"error": "–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å signal_ticker –∏ action"}

        result = await handle_trading_signal(signal_ticker, action)  # ‚úÖ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
        logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {signal_ticker}, –¥–µ–π—Å—Ç–≤–∏–µ: {action} ‚Üí {result}")
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return {"error": str(e)}

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
app.include_router(webhook_router)

# üîÑ –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/")
async def root():
    return {"status": "ok", "message": "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"}
