# trading.py
# –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:
# ‚Ä¢ RSI>80 / RSI<20  ‚Äì –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç ¬Ω —Å—Ç–∞—Ä—Ç-–ª–æ—Ç–∞;
#                      –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ + ¬Ω —Å—Ç–∞—Ä—Ç-–ª–æ—Ç–∞ (flip)
# ‚Ä¢ RSI>70 / RSI<30  ‚Äì 1-—á–∞—Å–æ–≤–æ–π cool-down; 1-–π —Å–∏–≥–Ω–∞–ª –∑–∞–∫—Ä—ã–≤–∞–µ—Ç ¬Ω –ø–æ–∑–∏—Ü–∏–∏,
#                      2-–π (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ flip) –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫
# ‚Ä¢ –ü–æ—Å–ª–µ flip —Å—á—ë—Ç—á–∏–∫–∏ RSI –æ–±–Ω—É–ª—è—é—Ç—Å—è

import asyncio, time, httpx
from telegram_logger import send_telegram_log
from config import (
    TICKER_MAP, START_QTY, ADD_QTY, MAX_QTY,
    BASE_URL, ACCOUNT_ID
)
from auth   import get_current_balance, get_access_token
from alor   import place_order, get_position_snapshot, get_current_positions
from trade_logger import log_trade_result
from balance      import send_balance_to_telegram

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
current_positions = {v["trade"]: 0 for v in TICKER_MAP.values()}
entry_prices: dict[str, float] = {}

last_signals: dict[str, float] = {}          # key (sym:rsiX) ‚Üí timestamp
rsi_state:   dict[str, dict]   = {}          # –¥–ª—è 70/30: key ‚Üí {"count":1, "dir":¬±1}

initial_balance = last_balance = None
total_profit = total_deposit = total_withdrawal = 0

SIGNAL_COOLDOWN_SECONDS = 3600    # 1-—á–∞—Å–æ–≤–æ–π cool-down –¥–ª—è –≤—Å–µ—Ö RSI
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


async def execute_market_order(symbol: str, side: str, qty: int):
    """–ú–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ 30 —Å"""
    res = await place_order({"side": side.upper(), "qty": qty,
                             "instrument": symbol, "symbol": symbol})
    if "error" in res:
        await send_telegram_log(f"‚ùå {side}/{symbol}/{qty}: {res['error']}")
        return None
    await asyncio.sleep(30)
    snap = await get_position_snapshot(symbol)
    return {"price": res.get("price", 0.0), "position": snap.get("qty", 0)}


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  –û–ë–†–ê–ë–û–¢–ö–ê –°–ò–ì–ù–ê–õ–ê  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
async def process_signal(tv_tkr: str, sig: str):
    global total_profit, initial_balance, last_balance, total_deposit, total_withdrawal

    if tv_tkr not in TICKER_MAP:
        await send_telegram_log(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä {tv_tkr}")
        return {"error": "Unknown ticker"}

    symbol    = TICKER_MAP[tv_tkr]["trade"]     # "CNY-9.25" / "NG-7.25"
    sig_upper = sig.upper()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ RSI>80  /  RSI<20  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if sig_upper in ("RSI>80", "RSI<20"):
        now, key = time.time(), f"{symbol}:{sig_upper}"
        if key in last_signals and now - last_signals[key] < SIGNAL_COOLDOWN_SECONDS:
            await send_telegram_log("‚è≥ RSI80/20 –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (cool-down 1 —á)")
            return {"status": "ignored"}
        last_signals[key] = now

        positions = await get_current_positions()
        cur = positions.get(symbol, 0)
        half_start = max(START_QTY[symbol] // 2, 1)   # –º–∏–Ω–∏–º—É–º 1 –∫–æ–Ω—Ç—Ä–∞–∫—Ç

        # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        want_short = sig_upper == "RSI>80"
        want_long  = sig_upper == "RSI<20"

        # ‚ë† –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º ¬Ω —Å—Ç–∞—Ä—Ç-–ª–æ—Ç–∞
        if cur == 0:
            side = "sell" if want_short else "buy"
            res  = await execute_market_order(symbol, side, half_start)
            if res:
                new_pos = -half_start if want_short else half_start
                current_positions[symbol] = new_pos
                entry_prices[symbol]      = res["price"]
                await send_telegram_log(
                    f"üöÄ {sig_upper}: –æ—Ç–∫—Ä—ã—Ç {'SHORT' if want_short else 'LONG'} "
                    f"{half_start} –ø–æ {symbol} @ {res['price']:.2f}"
                )
            return {"status": "rsi80_20_open"}

        # ‚ë° –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–ê–Ø —Å–∏–≥–Ω–∞–ª—É ‚Üí –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç
        if (want_short and cur > 0) or (want_long and cur < 0):
            side      = "sell" if cur > 0 else "buy"
            qty_flip  = abs(cur) + half_start         # –æ—Å—Ç–∞—Ç–æ–∫ + ¬Ω —Å—Ç–∞—Ä—Ç-–ª–æ—Ç–∞
            res = await execute_market_order(symbol, side, qty_flip)
            if res:
                prev_entry = entry_prices.get(symbol, 0)
                pnl = (res["price"] - prev_entry) * cur
                await log_trade_result(symbol, "LONG" if cur > 0 else "SHORT",
                                       cur, prev_entry, res["price"])

                new_pos = -half_start if side == "sell" else half_start
                current_positions[symbol] = new_pos
                entry_prices[symbol]      = res["price"]

                await send_telegram_log(
                    f"üîÑ {sig_upper}: –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç –ø–æ {symbol}\n"
                    f"–°—Ç–∞—Ä—ã–π –æ–±—ä—ë–º: {cur:+} ‚Üí –Ω–æ–≤—ã–π: {new_pos:+}\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {qty_flip} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, PnL –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —É—á–∞—Å—Ç–∫–∞: {pnl:+.2f}"
                )
            return {"status": "rsi80_20_flip"}

        # ‚ë¢ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –≤ —Ç—É –∂–µ —Å—Ç–æ—Ä–æ–Ω—É ‚Äì –Ω–∏—á–µ–≥–æ
        await send_telegram_log(
            f"‚ö†Ô∏è {sig_upper}: –ø–æ–∑–∏—Ü–∏—è {cur:+} —É–∂–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ—Ç"
        )
        return {"status": "noop_rsi80_20"}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ RSI>70  /  RSI<30  (¬Ω + –æ—Å—Ç–∞—Ç–æ–∫) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if sig_upper in ("RSI>70", "RSI<30"):
        now, key = time.time(), f"{symbol}:{sig_upper}"
        if key in last_signals and now - last_signals[key] < SIGNAL_COOLDOWN_SECONDS:
            await send_telegram_log("‚è≥ RSI70/30 –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (cool-down 1 —á)")
            return {"status": "ignored"}
        last_signals[key] = now

        positions = await get_current_positions()
        cur = positions.get(symbol, 0)
        if cur == 0:
            await send_telegram_log("‚ö†Ô∏è –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ ‚Äì RSI70/30 –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
            return {"status": "no_position"}

        want_sell = sig_upper == "RSI>70" and cur > 0
        want_buy  = sig_upper == "RSI<30" and cur < 0
        if not (want_sell or want_buy):
            await send_telegram_log("‚ö†Ô∏è RSI70/30 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚â† –ø–æ–∑–∏—Ü–∏–∏ ‚Äì –ø—Ä–æ–ø—É—Å–∫")
            return {"status": "noop"}

        side = "sell" if want_sell else "buy"
        state = rsi_state.get(key, {"count": 0, "dir": 0})
        same_dir = state["dir"] == (1 if cur > 0 else -1)

        if state["count"] == 0 or not same_dir:          # –ø–µ—Ä–≤—ã–π —Ä–∞–∑
            qty_close = max(abs(cur)//2, 1)
            rsi_state[key] = {"count": 1, "dir": 1 if cur > 0 else -1}
            part = "–ø–æ–ª–æ–≤–∏–Ω—É"
        else:                                            # –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
            qty_close = abs(cur)
            rsi_state.pop(key, None)
            part = "–æ—Å—Ç–∞—Ç–æ–∫"

        res = await execute_market_order(symbol, side, qty_close)
        if res:
            await send_telegram_log(
                f"üîî {sig_upper}: –∑–∞–∫—Ä—ã–≤–∞–µ–º {part} –ø–æ {symbol} "
                f"({qty_close} @ {res['price']:.2f})"
            )
        return {"status": "rsi70_30_close"}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LONG / SHORT (flip / avg / open) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if sig_upper not in ("LONG", "SHORT"):
        await send_telegram_log(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª {sig_upper}")
        return {"status": "invalid_action"}

    dir_  = 1 if sig_upper == "LONG" else -1
    side  = "buy" if dir_ > 0 else "sell"
    positions = await get_current_positions()
    cur = positions.get(symbol, 0)

    # 1‚É£ –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç ------------------------------------------------------------
    if cur * dir_ < 0:
        total_qty = abs(cur) + START_QTY[symbol]
        res = await execute_market_order(symbol, side, total_qty)
        if res:
            # –æ–±–Ω—É–ª—è–µ–º –≤—Å–µ RSI-—Å—á—ë—Ç—á–∏–∫–∏
            for k in list(rsi_state):
                if k.startswith(symbol + ":"): rsi_state.pop(k, None)
            for k in list(last_signals):
                if k.startswith(symbol + ":"): last_signals.pop(k, None)
            await send_telegram_log(f"üü¢ Flip {symbol}: –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞")
        return {"status": "flip"}

    # 2‚É£ –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ -----------------------------------------------------------
    if cur * dir_ > 0:
        new = cur + ADD_QTY[symbol]
        if abs(new) > MAX_QTY[symbol]:
            await send_telegram_log(f"‚ùå –õ–∏–º–∏—Ç –ø–æ {symbol}: {MAX_QTY[symbol]}")
            return {"status": "limit"}
        res = await execute_market_order(symbol, side, ADD_QTY[symbol])
        if res:
            await send_telegram_log(
                f"‚ûï –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ {symbol}: –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è {new:+} @ {res['price']:.2f}"
            )
        return {"status": "avg"}

    # 3‚É£ –û—Ç–∫—Ä—ã—Ç–∏–µ -------------------------------------------------------------
    if cur == 0:
        res = await execute_market_order(symbol, side, START_QTY[symbol])
        if res:
            await send_telegram_log(
                f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ {symbol}={dir_ * START_QTY[symbol]:+} @ {res['price']:.2f}"
            )
        return {"status": "open"}

    return {"status": "noop"}


__all__ = ["total_profit", "initial_balance"]
