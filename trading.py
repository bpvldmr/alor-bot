
import time
from datetime import datetime
from config import (
    TICKER_MAP,
    START_QTY, MAX_QTY, ADD_QTY,
    get_access_token, get_current_balance
)
from telegram_logger import send_telegram_log
from alor import place_order

# –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
current_positions = {info["trade"]: 0 for info in TICKER_MAP.values()}
entry_prices = {info["trade"]: 0.0 for info in TICKER_MAP.values()}


def is_weekend() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã—Ö–æ–¥–Ω–æ–π –ª–∏ —Å–µ–≥–æ–¥–Ω—è (UTC-—Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)."""
    return datetime.utcnow().weekday() in (5, 6)


def execute_market_order(ticker: str, side: str, qty: int) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ alor.place_order –∏ –∂–¥—ë–º –µ—ë –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º dict —Å –ø–æ–ª—è–º–∏:
      - error (str) ‚Äî –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,
      - status (str): 'filled'/'rejected'/'timeout',
      - price (float)  ‚Äî —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è,
      - order_id (str) ‚Äî ID –∑–∞—è–≤–∫–∏.
    """
    token = get_access_token()
    order = {
        "side": side.capitalize(),  # "Buy" –∏–ª–∏ "Sell"
        "qty": qty,
        "instrument": ticker
    }

    resp = place_order(order, token)
    if "error" in resp:
        return {"error": resp["error"]}

    status = resp.get("status", "")
    price = resp.get("price", 0.0)
    oid   = resp.get("order_id", "‚Äî")

    if status == "filled":
        send_telegram_log(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞: {side.upper()} {qty}√ó{ticker} @ {price:.2f} ‚ÇΩ\n"
            f"üÜî Order ID: {oid}"
        )
    else:
        send_telegram_log(f"‚ùå –ó–∞—è–≤–∫–∞ {side.upper()} {qty}√ó{ticker} ‚Äî {status.upper()} (ID {oid})")

    return {"status": status, "price": price, "order_id": oid}


def close_position(ticker: str) -> None:
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å—é —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É.
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤ Telegram –∏—Ç–æ–≥–æ–≤–æ–µ PnL –∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å.
    """
    qty = current_positions.get(ticker, 0)
    if qty == 0:
        return

    side = "sell" if qty > 0 else "buy"
    result = execute_market_order(ticker, side, abs(qty))
    if result.get("status") != "filled":
        return  # –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å

    fill_price = result["price"]
    entry_price = entry_prices.get(ticker, 0.0)
    pnl = (fill_price - entry_price) * qty
    pnl_pct = (pnl / (entry_price * abs(qty)) * 100) if entry_price else 0.0
    current_positions[ticker] = 0
    entry_prices[ticker] = 0.0

    balance = get_current_balance()
    send_telegram_log(
        f"‚ùå –ü–æ–∑–∏—Ü–∏—è {ticker} –∑–∞–∫—Ä—ã—Ç–∞: {qty:+} @ {fill_price:.2f} ‚ÇΩ\n"
        f"üìä PnL: {pnl:+.2f} ‚ÇΩ ({pnl_pct:+.2f}%)\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"
    )


async def process_signal(tv_ticker: str, signal: str) -> dict:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è webhook‚Äô–∞.
    tv_ticker ‚Äî –∫–ª—é—á –∏–∑ TICKER_MAP, signal ‚Äî "LONG" –∏–ª–∏ "SHORT".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    signal = signal.upper()
    if signal not in ("LONG", "SHORT"):
        return {"error": "Invalid signal"}

    # 1) –ù–µ —Ç–æ—Ä–≥—É–µ–º –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
    if is_weekend():
        msg = f"‚õî –í—ã—Ö–æ–¥–Ω–æ–π ‚Äî —Å–∏–≥–Ω–∞–ª {signal} –ø–æ {tv_ticker} –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω."
        send_telegram_log(msg)
        return {"error": "Weekend"}

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–∫–µ—Ä
    if tv_ticker not in TICKER_MAP:
        send_telegram_log(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä –∏–∑ TV: {tv_ticker}")
        return {"error": "Unknown ticker"}

    ticker = TICKER_MAP[tv_ticker]["trade"]
    direction = 1 if signal == "LONG" else -1
    current_qty = current_positions.get(ticker, 0)

    # 3) –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ (—Ç–æ—Ç –∂–µ –∑–Ω–∞–∫ –ø–æ–∑–∏—Ü–∏–∏)
    if current_qty * direction > 0:
        new_qty = current_qty + ADD_QTY[ticker]
        if abs(new_qty) > MAX_QTY[ticker]:
            send_telegram_log(f"üö´ –õ–∏–º–∏—Ç {ticker}={MAX_QTY[ticker]} –ø—Ä–µ–≤—ã—à–µ–Ω, —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
            return {"error": "Limit exceeded"}

        res = execute_market_order(ticker, signal.lower(), ADD_QTY[ticker])
        if res.get("status") == "filled":
            # –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            old_avg = entry_prices[ticker]
            entry_prices[ticker] = (
                (old_avg * abs(current_qty) + res["price"] * ADD_QTY[ticker]) /
                abs(new_qty)
            )
            current_positions[ticker] = new_qty
            balance = get_current_balance()
            send_telegram_log(
                f"‚ûï –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ {ticker}: {new_qty:+} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ @ {entry_prices[ticker]:.2f} ‚ÇΩ\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"
            )
        return {"status": "averaged", "position": current_positions[ticker]}

    # 4) –í—Å—Ç—Ä–µ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é
    if current_qty * direction < 0:
        close_position(ticker)
        start_qty = START_QTY[ticker]
        res = execute_market_order(ticker, signal.lower(), start_qty)
        if res.get("status") == "filled":
            current_positions[ticker] = direction * start_qty
            entry_prices[ticker] = res["price"]
            balance = get_current_balance()
            send_telegram_log(
                f"‚úÖ –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è {ticker}: {current_positions[ticker]:+} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ @ {res['price']:.2f} ‚ÇΩ\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"
            )
            return {"status": "reversed", "position": current_positions[ticker]}

    # 5) –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º
    if current_qty == 0:
        start_qty = START_QTY[ticker]
        res = execute_market_order(ticker, signal.lower(), start_qty)
        if res.get("status") == "filled":
            current_positions[ticker] = direction * start_qty
            entry_prices[ticker] = res["price"]
            balance = get_current_balance()
            send_telegram_log(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {ticker}: {current_positions[ticker]:+} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ @ {res['price']:.2f} ‚ÇΩ\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"
            )
            return {"status": "opened", "position": current_positions[ticker]}

    return {"status": "no_action"}
