from datetime import datetime
from config import TICKER_MAP, START_QTY, MAX_QTY, ADD_QTY, ACCOUNT_ID
from loguru import logger

# –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
current_positions = {
    "CRU5": 0,
    "NGN5": 0
}

def is_weekend():
    today = datetime.utcnow().weekday()  # 0 = –ü–Ω, 6 = –í—Å
    return today in [5, 6]  # –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

def place_market_order(ticker, side, quantity):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API ALOR
    logger.info(f"‚û°Ô∏è {side.upper()} {quantity} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ {ticker} (—Ä—ã–Ω–æ–∫)")
    return {
        "status": "order_sent",
        "ticker": ticker,
        "side": side,
        "qty": quantity
    }

def close_position(ticker):
    qty = current_positions[ticker]
    if qty > 0:
        place_market_order(ticker, "sell", qty)
    elif qty < 0:
        place_market_order(ticker, "buy", abs(qty))
    current_positions[ticker] = 0
    logger.info(f"‚ùå –ü–æ–∑–∏—Ü–∏—è –ø–æ {ticker} –∑–∞–∫—Ä—ã—Ç–∞")

def process_signal(signal_ticker: str, action: str):
    action = action.upper()

    if is_weekend():
        logger.warning("‚õî –°–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å. –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞.")
        return {"error": "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å. –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞."}

    if signal_ticker not in TICKER_MAP:
        logger.error(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä: {signal_ticker}")
        return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä: {signal_ticker}"}

    if action not in ["LONG", "SHORT"]:
        logger.error(f"Unknown action: {action}")
        return {"error": f"Unknown action: {action}"}

    ticker = TICKER_MAP[signal_ticker]["trade"]
    direction = 1 if action == "LONG" else -1
    current_qty = current_positions[ticker]

    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal_ticker} ‚Üí {ticker}, –¥–µ–π—Å—Ç–≤–∏–µ: {action}, —Ç–µ–∫—É—â–µ–µ: {current_qty}")

    # –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –≤ —Ç—É –∂–µ —Å—Ç–æ—Ä–æ–Ω—É
    if current_qty * direction > 0:
        new_qty = current_qty + ADD_QTY[ticker]
        if abs(new_qty) > MAX_QTY[ticker]:
            logger.warning(f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ {ticker}. –ü—Ä–æ–ø—É—Å–∫.")
            return {"status": "limit_reached", "ticker": ticker}
        place_market_order(ticker, action.lower(), ADD_QTY[ticker])
        current_positions[ticker] = new_qty
        return {"status": "added", "ticker": ticker, "new_qty": new_qty}

    # –û–±—Ä–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª ‚Äî –∑–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—É—é –∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é
    elif current_qty * direction < 0:
        close_position(ticker)
        start_qty = START_QTY[ticker]
        place_market_order(ticker, action.lower(), start_qty)
        current_positions[ticker] = direction * start_qty
        return {"status": "reversed", "ticker": ticker, "qty": start_qty}

    # –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
    elif current_qty == 0:
        start_qty = START_QTY[ticker]
        place_market_order(ticker, action.lower(), start_qty)
        current_positions[ticker] = direction * start_qty
        return {"status": "opened", "ticker": ticker, "qty": start_qty}
