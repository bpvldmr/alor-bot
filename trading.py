

from datetime import datetime
from config import (
    TICKER_MAP, START_QTY, MAX_QTY, ADD_QTY,
    get_access_token, get_current_balance
)
from telegram_logger import send_telegram_log
from alor import place_order

# –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
current_positions = {info["trade"]: 0 for info in TICKER_MAP.values()}
entry_prices = {}

def is_weekend():
    # 5 = —Å—É–±–±–æ—Ç–∞, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    return datetime.utcnow().weekday() in (5, 6)

def execute_market_order(ticker: str, side: str, qty: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—É—é –∑–∞—è–≤–∫—É –∏ –∂–¥—ë–º –µ—ë –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (float) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.
    """
    token = get_access_token()
    order = {"side": side.upper(), "qty": qty, "instrument": ticker}
    resp = place_order(order, token)

    # –û—à–∏–±–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ API
    if "error" in resp:
        send_telegram_log(f"‚ùå –ó–∞—è–≤–∫–∞ {side.upper()} {qty} {ticker} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {resp['error']}")
        return None

    status = resp.get("status")
    price = resp.get("price", 0)
    order_id = resp.get("order_id", "‚Äî")

    if status == "filled":
        send_telegram_log(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞: {side.upper()} {qty} {ticker} @ {price:.2f} ‚ÇΩ\n"
            f"üÜî Order ID: {order_id}"
        )
        return price

    # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞
    send_telegram_log(f"‚ùå –ó–∞—è–≤–∫–∞ {side.upper()} {qty} {ticker} {status.upper()}")
    return None

def close_position(ticker: str):
    qty = current_positions.get(ticker, 0)
    if qty == 0:
        return

    side = "sell" if qty > 0 else "buy"
    fill_price = execute_market_order(ticker, side, abs(qty))
    if fill_price is None:
        return  # –Ω–µ –∑–∞–∫—Ä—ã–ª–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º

    entry = entry_prices.get(ticker, 0)
    pnl = (fill_price - entry) * qty
    pnl_pct = (pnl / (entry * abs(qty)) * 100) if entry else 0.0
    current_positions[ticker] = 0

    balance = get_current_balance()
    send_telegram_log(
        f"‚ùå –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {ticker}: {qty:+} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ @ {fill_price:.2f} ‚ÇΩ\n"
        f"üìä PnL: {pnl:+.2f} ‚ÇΩ ({pnl_pct:+.2f} %)\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\n"
        f"üìå –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç"
    )

async def handle_trading_signal(tv_ticker: str, signal: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è webhook‚Äô–∞.
    signal ‚Äî "LONG" –∏–ª–∏ "SHORT"
    """
    if is_weekend():
        send_telegram_log(f"‚õî –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π, —Å–∏–≥–Ω–∞–ª {signal} –ø–æ {tv_ticker}")
        return {"error": "Weekend"}

    if tv_ticker not in TICKER_MAP:
        send_telegram_log(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä –∏–∑ TV: {tv_ticker}")
        return {"error": "Unknown ticker"}

    ticker = TICKER_MAP[tv_ticker]["trade"]
    direction = 1 if signal == "LONG" else -1
    current_qty = current_positions.get(ticker, 0)

    # 1) –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ (—Ç–æ—Ç –∂–µ –∑–Ω–∞–∫)
    if current_qty * direction > 0:
        new_qty = current_qty + ADD_QTY[ticker]
        if abs(new_qty) > MAX_QTY[ticker]:
            send_telegram_log(f"üö´ –õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ {ticker} = {MAX_QTY[ticker]}, —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return {"error": "Limit exceeded"}

        price = execute_market_order(ticker, signal.lower(), ADD_QTY[ticker])
        if price is not None:
            current_positions[ticker] = new_qty
            entry_prices[ticker] = (
                (entry_prices.get(ticker, 0) * abs(current_qty) + price * ADD_QTY[ticker])
                / abs(new_qty)
            )
            balance = get_current_balance()
            send_telegram_log(
                f"‚ûï –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ {ticker}: —Ç–µ–ø–µ—Ä—å {new_qty:+} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ @ {entry_prices[ticker]:.2f} ‚ÇΩ\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"
            )

    # 2) –í—Å—Ç—Ä–µ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é)
    elif current_qty * direction < 0:
        close_position(ticker)

        start_qty = START_QTY[ticker]
        price = execute_market_order(ticker, signal.lower(), start_qty)
        if price is not None:
            current_positions[ticker] = direction * start_qty
            entry_prices[ticker] = price
            balance = get_current_balance()
            send_telegram_log(
                f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è {ticker}: {direction * start_qty:+} @ {price:.2f} ‚ÇΩ\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"
            )

    # 3) –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º
    elif current_qty == 0:
        start_qty = START_QTY[ticker]
        price = execute_market_order(ticker, signal.lower(), start_qty)
        if price is not None:
            current_positions[ticker] = direction * start_qty
            entry_prices[ticker] = price
            balance = get_current_balance()
            send_telegram_log(
                f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {ticker}: {direction * start_qty:+} @ {price:.2f} ‚ÇΩ\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"
            )

    return {"status": "done"}

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è webhook
process_signal = handle_trading_signal
